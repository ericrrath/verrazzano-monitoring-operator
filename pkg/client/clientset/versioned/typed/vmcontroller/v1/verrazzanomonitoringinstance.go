// Copyright (c) 2020, Oracle Corporation and/or its affiliates.
// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.

// Code generated by client-gen. DO NOT EDIT.

package v1

import (
	"time"

	v1 "github.com/verrazzano/verrazzano-monitoring-operator/pkg/apis/vmcontroller/v1"
	scheme "github.com/verrazzano/verrazzano-monitoring-operator/pkg/client/clientset/versioned/scheme"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	rest "k8s.io/client-go/rest"
)

// VerrazzanoMonitoringInstancesGetter has a method to return a VerrazzanoMonitoringInstanceInterface.
// A group's client should implement this interface.
type VerrazzanoMonitoringInstancesGetter interface {
	VerrazzanoMonitoringInstances(namespace string) VerrazzanoMonitoringInstanceInterface
}

// VerrazzanoMonitoringInstanceInterface has methods to work with VerrazzanoMonitoringInstance resources.
type VerrazzanoMonitoringInstanceInterface interface {
	Create(*v1.VerrazzanoMonitoringInstance) (*v1.VerrazzanoMonitoringInstance, error)
	Update(*v1.VerrazzanoMonitoringInstance) (*v1.VerrazzanoMonitoringInstance, error)
	Delete(name string, options *metav1.DeleteOptions) error
	DeleteCollection(options *metav1.DeleteOptions, listOptions metav1.ListOptions) error
	Get(name string, options metav1.GetOptions) (*v1.VerrazzanoMonitoringInstance, error)
	List(opts metav1.ListOptions) (*v1.VerrazzanoMonitoringInstanceList, error)
	Watch(opts metav1.ListOptions) (watch.Interface, error)
	Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1.VerrazzanoMonitoringInstance, err error)
	VerrazzanoMonitoringInstanceExpansion
}

// verrazzanoMonitoringInstances implements VerrazzanoMonitoringInstanceInterface
type verrazzanoMonitoringInstances struct {
	client rest.Interface
	ns     string
}

// newVerrazzanoMonitoringInstances returns a VerrazzanoMonitoringInstances
func newVerrazzanoMonitoringInstances(c *VerrazzanoV1Client, namespace string) *verrazzanoMonitoringInstances {
	return &verrazzanoMonitoringInstances{
		client: c.RESTClient(),
		ns:     namespace,
	}
}

// Get takes name of the verrazzanoMonitoringInstance, and returns the corresponding verrazzanoMonitoringInstance object, and an error if there is any.
func (c *verrazzanoMonitoringInstances) Get(name string, options metav1.GetOptions) (result *v1.VerrazzanoMonitoringInstance, err error) {
	result = &v1.VerrazzanoMonitoringInstance{}
	err = c.client.Get().
		Namespace(c.ns).
		Resource("verrazzanomonitoringinstances").
		Name(name).
		VersionedParams(&options, scheme.ParameterCodec).
		Do().
		Into(result)
	return
}

// List takes label and field selectors, and returns the list of VerrazzanoMonitoringInstances that match those selectors.
func (c *verrazzanoMonitoringInstances) List(opts metav1.ListOptions) (result *v1.VerrazzanoMonitoringInstanceList, err error) {
	var timeout time.Duration
	if opts.TimeoutSeconds != nil {
		timeout = time.Duration(*opts.TimeoutSeconds) * time.Second
	}
	result = &v1.VerrazzanoMonitoringInstanceList{}
	err = c.client.Get().
		Namespace(c.ns).
		Resource("verrazzanomonitoringinstances").
		VersionedParams(&opts, scheme.ParameterCodec).
		Timeout(timeout).
		Do().
		Into(result)
	return
}

// Watch returns a watch.Interface that watches the requested verrazzanoMonitoringInstances.
func (c *verrazzanoMonitoringInstances) Watch(opts metav1.ListOptions) (watch.Interface, error) {
	var timeout time.Duration
	if opts.TimeoutSeconds != nil {
		timeout = time.Duration(*opts.TimeoutSeconds) * time.Second
	}
	opts.Watch = true
	return c.client.Get().
		Namespace(c.ns).
		Resource("verrazzanomonitoringinstances").
		VersionedParams(&opts, scheme.ParameterCodec).
		Timeout(timeout).
		Watch()
}

// Create takes the representation of a verrazzanoMonitoringInstance and creates it.  Returns the server's representation of the verrazzanoMonitoringInstance, and an error, if there is any.
func (c *verrazzanoMonitoringInstances) Create(verrazzanoMonitoringInstance *v1.VerrazzanoMonitoringInstance) (result *v1.VerrazzanoMonitoringInstance, err error) {
	result = &v1.VerrazzanoMonitoringInstance{}
	err = c.client.Post().
		Namespace(c.ns).
		Resource("verrazzanomonitoringinstances").
		Body(verrazzanoMonitoringInstance).
		Do().
		Into(result)
	return
}

// Update takes the representation of a verrazzanoMonitoringInstance and updates it. Returns the server's representation of the verrazzanoMonitoringInstance, and an error, if there is any.
func (c *verrazzanoMonitoringInstances) Update(verrazzanoMonitoringInstance *v1.VerrazzanoMonitoringInstance) (result *v1.VerrazzanoMonitoringInstance, err error) {
	result = &v1.VerrazzanoMonitoringInstance{}
	err = c.client.Put().
		Namespace(c.ns).
		Resource("verrazzanomonitoringinstances").
		Name(verrazzanoMonitoringInstance.Name).
		Body(verrazzanoMonitoringInstance).
		Do().
		Into(result)
	return
}

// Delete takes name of the verrazzanoMonitoringInstance and deletes it. Returns an error if one occurs.
func (c *verrazzanoMonitoringInstances) Delete(name string, options *metav1.DeleteOptions) error {
	return c.client.Delete().
		Namespace(c.ns).
		Resource("verrazzanomonitoringinstances").
		Name(name).
		Body(options).
		Do().
		Error()
}

// DeleteCollection deletes a collection of objects.
func (c *verrazzanoMonitoringInstances) DeleteCollection(options *metav1.DeleteOptions, listOptions metav1.ListOptions) error {
	var timeout time.Duration
	if listOptions.TimeoutSeconds != nil {
		timeout = time.Duration(*listOptions.TimeoutSeconds) * time.Second
	}
	return c.client.Delete().
		Namespace(c.ns).
		Resource("verrazzanomonitoringinstances").
		VersionedParams(&listOptions, scheme.ParameterCodec).
		Timeout(timeout).
		Body(options).
		Do().
		Error()
}

// Patch applies the patch and returns the patched verrazzanoMonitoringInstance.
func (c *verrazzanoMonitoringInstances) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1.VerrazzanoMonitoringInstance, err error) {
	result = &v1.VerrazzanoMonitoringInstance{}
	err = c.client.Patch(pt).
		Namespace(c.ns).
		Resource("verrazzanomonitoringinstances").
		SubResource(subresources...).
		Name(name).
		Body(data).
		Do().
		Into(result)
	return
}
